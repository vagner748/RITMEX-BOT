#!/usr/bin/env bash

set -euo pipefail

# One-click setup for ritmex-bot (Linux/macOS)
# - Ensures Bun is installed
# - Installs dependencies
# - Prompts for API credentials
# - Generates .env
# - Prepares to start the bot (does not auto-run)

main() {
  require_unix
  ensure_repo
  referral_notice
  ensure_bun
  install_deps
  prompt_env
  write_env
  echo
  echo "✅ Instalação concluída!"
  echo "Diretório do projeto: $PROJECT_DIR"
  echo "Por favor, insira os seguintes comandos no terminal para iniciar:"
  echo
  echo "  cd ritmex-bot"
  echo "  bun start"
  echo
  echo "Dica: Antes de iniciar, você pode verificar ou editar o arquivo .env no diretório do projeto."
}

require_unix() {
  case "$(uname -s)" in
    Linux|Darwin) ;;
    *) echo "This script supports only Linux and macOS." >&2; exit 1 ;;
  esac
}

ensure_bun() {
  if command -v bun >/dev/null 2>&1; then
    echo "✔ Bun found: $(bun --version)"
    return
  fi
  echo "ℹ Bun not found. Installing Bun..."
  if [ "$(uname -s)" = "Darwin" ] && command -v brew >/dev/null 2>&1; then
    brew install bun
  else
    # Non-interactive install via official script
    curl -fsSL https://bun.sh/install | bash
    # shellcheck disable=SC1090
    if [ -f "$HOME/.bun/bun" ] || [ -d "$HOME/.bun" ]; then
      export BUN_INSTALL="$HOME/.bun"
      export PATH="$BUN_INSTALL/bin:$PATH"
    fi
  fi
  if ! command -v bun >/dev/null 2>&1; then
    echo "❌ Failed to install Bun. Please install it manually from https://bun.sh" >&2
    exit 1
  fi
  echo "✔ Bun installed: $(bun --version)"
}

ensure_repo() {
  # Detect if running inside project root already
  if [ -f "package.json" ] && grep -q '"name"\s*:\s*"ritmex-bot"' package.json 2>/dev/null; then
    PROJECT_DIR="$PWD"
    echo "✔ Project detected in current directory: $PROJECT_DIR"
    return
  fi

  local REPO_URL="https://github.com/discountry/ritmex-bot.git"
  local TAR_URL="https://github.com/discountry/ritmex-bot/archive/refs/heads/main.tar.gz"
  local TARGET_DIR="${RITMEX_DIR:-ritmex-bot}"

  if [ -d "$TARGET_DIR" ] && [ -f "$TARGET_DIR/package.json" ]; then
    PROJECT_DIR="$(cd "$TARGET_DIR" && pwd)"
    echo "✔ Project directory found: $PROJECT_DIR"
    return
  fi

  echo "Fetching ritmex-bot sources..."
  if command -v git >/dev/null 2>&1; then
    git clone --depth=1 "$REPO_URL" "$TARGET_DIR"
  else
    echo "ℹ git not found; downloading tarball..."
    curl -fsSL "$TAR_URL" -o /tmp/ritmex-bot.tar.gz
    mkdir -p "$TARGET_DIR"
    tar -xzf /tmp/ritmex-bot.tar.gz --strip-components=1 -C "$TARGET_DIR"
    rm -f /tmp/ritmex-bot.tar.gz
  fi
  PROJECT_DIR="$(cd "$TARGET_DIR" && pwd)"
}

referral_notice() {
  echo
  echo "Antes de começar: por favor, abra o seguinte link para conectar sua carteira e juntar-se à equipe, aproveitando um desconto de 30% nas taxas:"
  echo "https://www.asterdex.com/zh-CN/referral/4665f3"
  echo
  # Wait for user to press Enter on a real TTY; don't fail if no TTY
  read -r -p "Após abrir o link, pressione Enter para continuar..." _ < /dev/tty || true
}

install_deps() {
  echo "Installing dependencies with Bun..."
  (cd "$PROJECT_DIR" && bun install)
}

prompt_env() {
  echo
  echo "Por favor, insira suas credenciais da API AsterDex."
  echo "Se você ainda não tem uma API, abra o seguinte link para criar uma antes de continuar:"
  echo "https://www.asterdex.com/zh-CN/api-management"
  while true; do
    read -r -p "Por favor, insira a ASTER_API_KEY: " ASTER_API_KEY < /dev/tty
    [ -n "${ASTER_API_KEY:-}" ] && break
    echo "A ASTER_API_KEY não pode estar vazia. Por favor, insira novamente."
  done
  while true; do
    read -r -p "Por favor, insira o ASTER_API_SECRET: " ASTER_API_SECRET < /dev/tty
    [ -n "${ASTER_API_SECRET:-}" ] && break
    echo "O ASTER_API_SECRET não pode estar vazio. Por favor, insira novamente."
  done
  # Outros parâmetros usarão valores padrão (podem ser modificados no .env)
  TRADE_SYMBOL="BTCUSDT"
  TRADE_AMOUNT="0.001"
  LOSS_LIMIT="0.03"
  KLINE_INTERVAL="1m"
}

write_env() {
  local env_file="$PROJECT_DIR/.env"
  echo "Writing ${env_file}..."
  cat > "${env_file}" <<EOF
# Generated by setup.sh
ASTER_API_KEY=${ASTER_API_KEY}
ASTER_API_SECRET=${ASTER_API_SECRET}
TRADE_SYMBOL=${TRADE_SYMBOL}
TRADE_AMOUNT=${TRADE_AMOUNT}
LOSS_LIMIT=${LOSS_LIMIT}
KLINE_INTERVAL=${KLINE_INTERVAL}

# Optional maker params (uncomment and tune as needed)
# MAKER_LOSS_LIMIT=0.03
# MAKER_PRICE_CHASE=0.3
# MAKER_BID_OFFSET=0
# MAKER_ASK_OFFSET=0
# MAKER_REFRESH_INTERVAL_MS=1500
# MAKER_MAX_CLOSE_SLIPPAGE_PCT=0.05
# MAKER_PRICE_TICK=0.1
EOF
  echo "✔ .env created at ${env_file}"
}

main "$@"


